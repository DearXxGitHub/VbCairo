#
# VbCairo Project
# GenIdl (c) 2018 by the community at vbforums.com
#
# Cairo C header files grammar
#
# Parses typdefs, enums, structs and function declarations
#

StmtList        = ret:''                                                {   JsonItem(oJson, -1) = Empty
                                                                            Set $ret = oJson }
                  (
                      n:(TypedefDecl | TypedefCallback
                        | EnumDecl | StructDecl | FunDecl
                        | SkipStmt)                                     {   Set oJson = $ret : JsonItem(oJson, -1) = $n }
                  )*
                  EOL                                                   {   Set $$ = $ret }
    
TypedefDecl     = TYPEDEF t:Type n:ID SEMI                              {   JsonItem(oJson, "Tag") = "TypedefDecl"
                                                                            JsonItem(oJson, "Name") = $n
                                                                            JsonItem(oJson, "Type") = $t
                                                                            Set $$ = oJson }
TypedefCallback = TYPEDEF Linkage? t:TypeUnlimited
                  LPAREN CC_STDCALL STAR n:ID RPAREN
                  LPAREN p:ParamList? RPAREN SEMI                       {   JsonItem(oJson, "Tag") = "TypedefCallback"
                                                                            JsonItem(oJson, "Name") = $n
                                                                            JsonItem(oJson, "Type") = $t
                                                                            JsonItem(oJson, "Params") = $p
                                                                            Set $$ = oJson }
EnumDecl        = TYPEDEF? ENUM n:ID? LBRACE ret:''                     {   JsonItem(oJson, "Tag") = "EnumDecl" 
                                                                            JsonItem(oJson, "Items/-1") = Empty
                                                                            Set $ret = oJson }
                  (
                      e:ID (v:EnumValue | v:EMPTY) COMMA?               {   JsonItem(oEl, "Name") = $e
                                                                            JsonItem(oEl, "Value") = zn(CStr($v), Empty)
                                                                            Set oJson = $ret
                                                                            JsonItem(oJson, "Items/-1") = oEl }
                  )+
                  RBRACE ns:IDList? SEMI                                {   Set oJson = $ret
                                                                            JsonItem(oJson, "Name") = $n
                                                                            JsonItem(oJson, "Names") = $ns
                                                                            Set $$ = oJson }
StructDecl      = TYPEDEF? STRUCT n:ID? LBRACE ret:''                   {   JsonItem(oJson, "Tag") = "StructDecl" 
                                                                            JsonItem(oJson, "Items/-1") = Empty
                                                                            Set $ret = oJson }
                  (
                      (t:Type es:StructMemList as:ArraySuffixList? SEMI){   JsonItem(oEl, "Names") = $es
                                                                            JsonItem(oEl, "Type") = $t
                                                                            JsonItem(oEl, "ArraySuffixes") = $as
                                                                            Set oJson = $ret
                                                                            JsonItem(oJson, "Items/-1") = oEl }
                    | (t:TypeUnlimited LPAREN CC_STDCALL STAR es:IDList RPAREN
                        LPAREN p:ParamList? RPAREN SEMI)                {   JsonItem(oEl, "Names") = $es
                                                                            JsonItem(oEl, "Type") = "uintptr_t" 
                                                                            JsonItem(oEl, "PfnType") = $t
                                                                            JsonItem(oEl, "PfnParams") = $p
                                                                            Set oJson = $ret
                                                                            JsonItem(oJson, "Items/-1") = oEl }
                    | t:StructDecl                                      {   Set oEl = $t
                                                                            For Each vElem In JsonKeys(oEl, "Items")
                                                                                JsonItem(oJson, "Items/-1") = JsonItem(oEl, "Items/" & vElem)
                                                                            Next }
                  )+
                  RBRACE ns:IDList? SEMI                                {   Set oJson = $ret
                                                                            JsonItem(oJson, "Name") = $n
                                                                            JsonItem(oJson, "Names") = $ns
                                                                            Set $$ = oJson }
FunDecl         = Linkage? t:Type CC_STDCALL n:ID 
                  LPAREN (p:ParamList)? RPAREN (SEMI | LBRACE)             {   JsonItem(oJson, "Tag") = "FunDecl"
                                                                            JsonItem(oJson, "Name") = $n
                                                                            JsonItem(oJson, "Type") = $t
                                                                            JsonItem(oJson, "Params") = $p
                                                                            Set $$ = oJson }
SkipStmt        = < (!(NL | SEMI) (BLOCKCOMMENT | LINECOMMENT | 
                                   WS | .))* (NL | SEMI) - >            {   JsonItem(oJson, "Tag") = "SkipStmt"
                                                                            JsonItem(oJson, "Text") = $$text
                                                                            Set $$ = oJson }

Type            = < ((TypePrefix* TypeBody) | (TypePrefix+ TypeBody?))
                      !LPAREN !SEMI TypeSuffix? >                       { $$ = Trim$(Replace($$text, vbTab, " ")) }
TypeUnlimited   = < ((TypePrefix* TypeBody) | (TypePrefix+ TypeBody?))
                      TypeSuffix? >                                     { $$ = Trim$(Replace($$text, vbTab, " ")) }
TypePrefix      = CONST | UNSIGNED | STRUCT | ENUM
TypeBody        = INT           | CHAR          | UNSIGNED
                  | VOID        | INT_A_T       | INT_B_T
                  | INT_C_T     | UINT_A_T      | UINT_B_T
                  | UINT_C_T    | UINT_D_T      | UINTPTR_T     | SIZE_T        
                  | DOUBLE      | LONG          | LONG_LONG     | BOOL          
                  | RefType
TypeSuffix      = (CONST? STAR)*
                                        # Note: action with prefix '&' is evaluated at match time
RefType         = ID                    &{ IsRefType($$text) }          
ParamList       = ret:Param                                             {   JsonItem(oJson, -1) = $ret : Set $ret = oJson }
                  (
                    COMMA n:Param                                       {   Set oJson = $ret : JsonItem(oJson, -1) = $n }
                  )*                                                    {   Set $$ = $ret }
Param           = t:Type n:ID? a:ArraySuffix?                           {   JsonItem(oJson, "Type") = $t
                                                                            JsonItem(oJson, "Name") = $n
                                                                            JsonItem(oJson, "ArraySuffix") = zn(CStr($a), Empty)
                                                                            Set $$ = oJson }
EnumValue       = EQ ret:''                                             {   Set $ret = New Collection }
                  e:EnumValueToken                                      {   $ret.Add $e }
                  (e:EnumValueToken                                     {   $ret.Add $e }
                  )*                                                    {   Set oJson = $ret : $$ = ConcatCollection(oJson, " ") }
EnumValueToken  = < (!(BLOCKCOMMENT | LINECOMMENT | WS | [,}]) .)+ > -  {   $$ = $$text }
ArraySuffix     = < LBRACKET (!RBRACKET .)* RBRACKET > -                {   $$ = $$text }
Linkage         = (EXTERN | STATIC | CAIRO_PUBLIC | CAIRO_WARN) INLINE?
IDList          = ret:ID                                                {   JsonItem(oJson, -1) = $ret : Set $ret = oJson }
                  (
                    COMMA n:ID                                          {   Set oJson = $ret : JsonItem(oJson, -1) = $n }
                  )*                                                    {   Set $$ = $ret }
StructMemList   = ret:ID                                                {   JsonItem(oJson, -1) = $ret : Set $ret = oJson }
                  (
                    ArraySuffix? COMMA STAR? n:ID                       {   Set oJson = $ret : JsonItem(oJson, -1) = $n }
                  )*                                                    {   Set $$ = $ret }
ArraySuffixList = ret:ArraySuffix                                                {   JsonItem(oJson, -1) = $ret : Set $ret = oJson }
                  (
                    n:ArraySuffix                                       {   Set oJson = $ret : JsonItem(oJson, -1) = $n }
                  )*                                                    {   Set $$ = $ret }

# Terminals

ID              = < SYM SD* > -                                         {   $$ = $$text }
SYM             = [a-zA-Z_]
SD              = [a-zA-Z_0-9#]
TYPEDEF         = 'typedef'i !SD -
INT             = 'int' !SD -
CHAR            = 'char' !SD -
UNSIGNED        = 'unsigned' !SD -
CONST           = 'const' !SD -
VOID            = 'void' !SD -
INT_A_T         = 'int8_t' !SD -
INT_B_T         = 'int32_t' !SD -
INT_C_T         = 'int64_t' !SD -
UINT_A_T        = 'uint8_t' !SD -
UINT_B_T        = 'uint32_t' !SD -
UINT_C_T        = 'uint64_t' !SD -
UINT_D_T        = 'uint16_t' !SD -
UINTPTR_T       = 'uintptr_t' !SD -
SIZE_T          = 'size_t' !SD -
DOUBLE          = 'double' !SD -
LONG            = 'long' !SD -
LONG_LONG       = 'long long' !SD -
BOOL            = 'bool' !SD -
CC_STDCALL      = ('CAIRO_CALLCONV' | 'WINAPI' | '') !SD -
ENUM            = 'enum' !SD -
STRUCT          = 'struct' !SD -
EXTERN          = 'extern' !SD -
STATIC          = 'static' !SD -
INLINE          = 'inline' !SD -
CAIRO_PUBLIC    = 'cairo_public' !SD -
CAIRO_WARN      = 'cairo_warn' !SD -
STAR            = '*' -
LPAREN          = '(' -
RPAREN          = ')' -
COMMA           = ',' -
SEMI            = ';' -
LBRACE          = '{' - 
RBRACE          = '}' -
EQ              = '=' -
LBRACKET        = '[' -
RBRACKET        = ']' -

# Whitespace

-               = (BLOCKCOMMENT | LINECOMMENT | WS)*
WS              = ([ \t] | NL)+
NL              = '\r'? '\n' PREPRO?
PREPRO          = '#' [^\r\n]* NL
BLOCKCOMMENT    = '/*' (!'*/' ((&'/*' BLOCKCOMMENT) | .))* '*/'
LINECOMMENT     = '//' [^\r\n]* NL

EMPTY           = < '' >                                                {   $$ = $$text }
EOL             = !.

@prolog {
    Dim oJson As Object
    Dim oEl As Object
    Dim vElem As Variant
    
    With ctx
}

@epilog {
    End With
}
